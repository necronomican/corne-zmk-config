/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <19 20 21>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <16 15 14>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };
    };

    behaviors {
        modtap_behave: modtap_behave {
            compatible = "zmk,behavior-hold-tap";
            label = "MODTAP_BEHAVE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp CAPSLOCK  &kp Q  &kp W                      &kp E                   &kp R                      &kp T             &kp Y       &kp U                  &kp I                   &kp O                       &kp P     &kp BSPC
&kp TAB       &kp A  &modtap_behave LEFT_ALT S  &modtap_behave LCTRL D  &modtap_behave LEFT_GUI F  &kp G             &kp H       &modtap_behave RGUI J  &modtap_behave RCTRL K  &modtap_behave RIGHT_ALT L  &kp SEMI  &kp SQT
&tog 3        &kp Z  &kp X                      &kp C                   &kp V                      &kp B             &kp N       &kp M                  &kp COMMA               &kp DOT                     &kp FSLH  &tog 4
                                                &mo 3                   &lt 2 BACKSPACE            &kp LEFT_SHIFT    &kp RSHIFT  &lt 1 SPACE            &lt 5 SQT
            >;
        };

        prog_sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)  &kp LS(LPAR)    &kp LS(RPAR)  &kp LS(AMPS)  &kp LS(MINUS)  &kp EQUAL  &kp BSLH       &trans
&trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(LT)    &kp LS(LBRC)    &kp LS(RBRC)  &kp LS(GT)    &kp DEL        &trans     &kp SEMICOLON  &trans
&trans  &kp LS(AMPS)  &kp LS(STAR)   &kp GRAVE      &trans        &kp LBKT        &kp RBKT      &trans        &kp COMMA      &kp DOT    &kp FSLH       &trans
                                     &trans         &trans        &trans          &trans        &trans        &trans
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp LA(F2)        &trans             &kp LG(RS(UP_ARROW))  &kp LG(DOWN)        &kp PG_UP  &kp HOME  &kp UP    &kp END    &kp END        &trans
&trans  &trans  &kp LG(RS(LEFT))  &kp LG(LS(RIGHT))  &kp LG(LC(UP_ARROW))  &kp LG(LC(DOWN))    &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp BSLH       &trans
&trans  &trans  &trans            &trans             &trans                &trans              &kp LG(M)  &trans    &trans    &trans     &kp LG(SLASH)  &trans
                                  &trans             &trans                &trans              &trans     &trans    &trans
            >;
        };

        num_layer {
            bindings = <
&trans  &kp N1         &kp N2  &kp N3  &kp N4  &kp N5    &kp N6        &kp N7  &kp N8  &kp N9  &kp N0         &trans
&trans  &kp LS(CARET)  &trans  &trans  &trans  &trans    &kp LS(STAR)  &kp N6  &kp N5  &kp N4  &kp LS(PLUS)   &trans
&trans  &kp KP_EQUAL   &trans  &trans  &trans  &trans    &kp FSLH      &kp N1  &kp N2  &kp N3  &kp LS(UNDER)  &trans
                               &trans  &trans  &trans    &trans        &trans  &trans
            >;
        };

        BT_LAYER {
            bindings = <
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &bt BT_PRV    &bt BT_NXT      &kp C_VOLUME_UP  &kp C_BRIGHTNESS_INC  &trans  &trans  &bootloader  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOL_UP     &kp C_BRIGHTNESS_DEC  &trans  &trans  &trans       &trans
&trans  &trans        &trans          &trans        &trans        &trans          &trans           &trans                &trans  &trans  &trans       &trans
                                      &trans        &trans        &trans          &trans           &trans                &trans
            >;
        };

        FUNC_LAYER {
            bindings = <
&trans  &kp F1   &kp F2  &kp F3  &kp F4  &kp F5        &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp F11  &trans  &trans  &trans  &kp LC(F5)    &trans  &trans  &trans  &trans  &kp F11  &trans
&trans  &kp F12  &trans  &trans  &trans  &trans        &trans  &trans  &trans  &trans  &kp F12  &trans
                         &trans  &trans  &trans        &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bt_combo {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
